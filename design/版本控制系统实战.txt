Case 1: 多组协作开发
其它组修改本组代码并不会运行本组Jenkins Pipeline
导致本组分支获取代码变更后在Pipeline构建时才触发代码验证
导致本组分支获取代码抛出质量检测问题(SonarQube)

Case 2: 无分支状态的版本控制系统(Perforce)
使用无分支版本系统提交变更之后，无法运行Pipelines
导致无法验证修改模块的单元测试是否通过，可能引入新的系统错误
(本地开发时应该验证当前模块的相关测试是否能够全部通过再merge)

Case 3: 软件的大升级(JDK或者Framework升级)
考虑的因素: 软件构建工具的兼容，依赖版本之间的兼容，与其他软件的兼容，与旧版本的兼容
新版本的构建: 添加新的构建Pipeline(新Env环境)，同时保留旧版本的Jenkins构建

Case 4: Hotfix / Port
当客户使用低版本的软件，并没有进行升级或者迁移
当出现重大的迫切需求时，需要在低版本上提供Hotfix，并移植到最新版本上

Case 5: Backport
当New版和Old版本都存在问题，在New版本上添加fix之后
需要将添加的fix向后移植到Old版本，以保证如果使用Old版本不会出现问题

Case 6: Regression
当从Old版本迁移到New版本上时出现问题，此类回归问题导致只能退回到Old版本使用
TODO. 软件版本控制实战
 - 软件的版本会经过从dev到release的迭代周期
 - 软件的版本升级始终需要考虑到兼容性问题(软件之间的依赖，依赖库版本的差异)

Case 1: 多组协作项目
其它组修改本组代码并不会运行本组Pipelines
- 导致本组代码变更后没有触发代码验证(SonarQube)
- 导致获取最新本组代码后抛出代码质量检测问题

Case 2: 无分支状态的版本控制系统(Perforce)
使用无分支系统提交变更之后，无法运行Pipelines
- 导致无法验证修改的模块的单元测试是否全部都通过，可能引入新的系统错误
(本地开发时应该验证当前模块的相关测试是否能够全部通过再merge)

Case 3: 软件的大升级
保留软件之前版本的Jenkins构建
对于新版本的迭代使用新的Pipeline进行构建，适配独立的Env环境

Case 4: Hotfix / Port
当客户使用低版本的软件，并没有进行升级或者迁移
当出现重大的迫切需求时，需要在低版本上提供Hotfix，并移植到最新版本上

Case 5: Backport
当New版和Old版本都存在问题，在New版本上添加fix之后
需要将添加的fix向后移植到Old版本，以保证如果使用Old版本不会出现问题

Case 6: Regression
当从Old版本迁移到New版本上时出现问题，此类回归问题导致只能退回到Old版本使用